version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: passive_captcha_prod
      POSTGRES_USER: ${POSTGRES_USER:-captcha_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_here}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - captcha_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-captcha_user} -d passive_captcha_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_here}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - captcha_network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-redis_password_here}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-captcha_user}:${POSTGRES_PASSWORD:-secure_password_here}@postgres:5432/passive_captcha_prod
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_here}@redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-production-secret-key-change-this}
      ADMIN_SECRET: ${ADMIN_SECRET:-Admin123}
      CONFIDENCE_THRESHOLD: ${CONFIDENCE_THRESHOLD:-0.6}
      
      # API Configuration
      API_BASE_URL: ${API_BASE_URL:-http://localhost:5003}
      WEBSOCKET_URL: ${WEBSOCKET_URL:-ws://localhost:5003}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,https://yourdomain.com}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-1000}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/app.log
      
      # Flask Configuration
      FLASK_ENV: production
      FLASK_DEBUG: 'false'
      
      # Resource Limits
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}
      MAX_WORKERS: ${MAX_WORKERS:-8}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-120}
      
    volumes:
      - ./models:/app/models:ro
      - backend_logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "5003:5000"
    networks:
      - captcha_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx + Vue.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5003}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:5003}
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - captcha_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production load balancing)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - captcha_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - captcha_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - captcha_network
    depends_on:
      - prometheus

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - captcha_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - backend_logs:/logs:ro
    ports:
      - "5044:5044"
    networks:
      - captcha_network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - captcha_network
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  captcha_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16